#include "./mainBus.hpp"
#include <iostream>

MainBus::MainBus() {
    u8 temp[] = {0x69,0x65,0x75,0x6D,0x7D,0x79,0x61,0x71,0x29,0x25,0x35,0x2D,0x3D,0x39,0x21,0x31,0x0A,0x06,0x16,0x0E,0x1E,0x90,0xB0,0xF0,0x24,0x2C,0x30,0xD0,0x10,0x00,0x50,0x70,0x18,0xD8,0x58,0xB8,0xC9,0xC5,0xD5,0xCD,0xDD,0xD9,0xC1,0xD1,0xE0,0xE4,0xEC,0xC0,0xC4,0xCC,0xC6,0xD6,0xCE,0xDE,0xCA,0x88,0x49,0x45,0x55,0x4D,0x5D,0x59,0x41,0x51,0xE6,0xF6,0xEE,0xFE,0xE8,0xC8,0x4C,0x6C,0x20,0xA9,0xA5,0xB5,0xAD,0xBD,0xB9,0xA1,0xB1,0xA2,0xA6,0xB6,0xAE,0xBE,0xA0,0xA4,0xB4,0xAC,0xBC,0x4A,0x46,0x56,0x4E,0x5E,0xEA,0x09,0x05,0x15,0x0D,0x1D,0x19,0x01,0x11,0x48,0x08,0x68,0x28,0x2A,0x26,0x36,0x2E,0x3E,0x6A,0x66,0x76,0x6E,0x7E,0x40,0x60,0xE9,0xE5,0xF5,0xED,0xFD,0xF9,0xE1,0xF1,0x38,0xF8,0x78,0x85,0x95,0x8D,0x9D,0x99,0x81,0x91,0x86,0x96,0x8E,0x84,0x94,0x8C,0xAA,0xA8,0xBA,0x8A,0x9A,0x98};
    memcpy(ram, temp, sizeof(temp));
}

u8 MainBus::read(u16 addr) {
    u8 highestNibble = getHighestNibble(addr);

    switch (highestNibble) {
    case 0x0: case 0x1: // 0x0000 - 0x1FFF
        return ram[addr % 0x800];    
    case 0x2: case 0x3: // 0x2000 - 0x3FFF
        ; // PPU registers and mirrors (% 8)
    case 0x4: 
        ; // check for 0x4000 - 0x401F, else fall-through
    case 0x5: case 0x6: case 0x7: case 0x8: case 0x9:  // 0x4000 - 0xFFFF
    case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF:
        ;
    default:
        std::cout << "Yo, I haven't implemented anything other than RAM" << std::endl;
        break;
    }
    return 0x00;
}

void MainBus::write(u16 addr, u8 val) {
    u8 highestNibble = getHighestNibble(addr);

    switch (highestNibble) {
    case 0x0: case 0x1: // 0x0000 - 0x1FFF
        ram[addr % 0x800] = val;    
        break;
    case 0x2: case 0x3: // 0x2000 - 0x3FFF
        ; // PPU registers and mirrors (% 8)
    case 0x4: 
        ; // check for 0x4000 - 0x401F, else fall-through
    case 0x5: case 0x6: case 0x7: case 0x8: case 0x9:  // 0x4000 - 0xFFFF
    case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF:
        ;
    default:
        std::cout << "Yo, I haven't implemented anything other than RAM" << std::endl;
        break;
    }
}

u8* MainBus::getPointerTo(u16 addr) {
    u8 highestNibble = getHighestNibble(addr);

    switch (highestNibble) {
    case 0x0: case 0x1: // 0x0000 - 0x1FFF
        return ram + (addr % 0x800);
    case 0x2: case 0x3: // 0x2000 - 0x3FFF
        ; // PPU registers and mirrors (% 8)
    case 0x4: 
        ; // check for 0x4000 - 0x401F, else fall-through
    case 0x5: case 0x6: case 0x7: case 0x8: case 0x9:  // 0x4000 - 0xFFFF
    case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF:
        ;
    default:
        std::cout << "Yo, I haven't implemented anything other than RAM" << std::endl;
        break;
    }
    return bogusPointer;
}